%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 0         
num_of_cam: 2  

imu_topic: "/camera/imu"
image0_topic: "/camera/fisheye1/image_raw"
image1_topic: "/camera/fisheye2/image_raw"
output_path: "~/vins_workspace/output"   

cam0_calib: "fisheye1.yaml"
cam1_calib: "fisheye2.yaml"
image_width: 848
image_height: 800
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix #cam0 coordinate under body coordinate
   rows: 4
   cols: 4
   dt: d
   data: [-0.99998927, -0.00437436, 0.00796689, 0.01294542,
                0.00436149, -0.99998916, -0.00163156, 0.0043911,
                0.00797394, -0.00159675, 0.99996693, 0.0106259,
                0., 0., 0., 1.]

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [-0.99998927, -0.00388181, 0.00252725, -0.05122613,
                0.00387984, -0.99999217, -0.00078472, 0.00440409,
                0.00253027, -0.00077491, 0.9999965, 0.01070218,
                0., 0., 0., 1. ]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 180            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
# acc_n: 0.000066952452471          # accelerometer measurement noise standard deviation. #0.2   0.04
# gyr_n: 0.000005148030141         # gyroscope measurement noise standard deviation.     #0.05  0.004
# acc_w: 0.0001        # accelerometer bias random work noise standard deviation.  #0.002
# gyr_w: 0.000000499999999       # gyroscope bias random work noise standard deviation.     #4.0e-5
acc_n: 1.8979503469116584e-02          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 2.4716016278708082e-03         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 9.0808277526944049e-04         # accelerometer bias random work noise standard deviation.  #0.002
gyr_w: 2.1375609241879366e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805         # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.007293640443427282           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/vins_workspace/output" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

